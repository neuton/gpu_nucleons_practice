/*
	OpenCL C kernel for interactions of nucleons (and electrons) computation
	------------------------------------------------------------------------
	r -- global array of positions
	v -- global array of speeds
	a -- global array of accelarations
	m -- global (constant) array of masses
	qe -- global (constant) array of electric charges (+1/-1/0)
	qn -- global (constant) array of barionic charges (0/1)
*/

#define real float
#define v3r float4	// OpenCL 4-vector type

#include "kernel.h"	// definitions for dt, dt2, ln etc. (generated by python script)

// kernel which computes forces
__kernel __attribute__((reqd_work_group_size(ln, 1, 1)))
void compute_forces(__global const v3r * r,
					__global const v3r * v,
					__global v3r * a,
					__constant const real * m,
					__constant const int * qe,
					__constant const int * qn)
{
	// each work-item (thread) corresponds to a particle
	const uint id = get_global_id(0), lid = get_local_id(0), n = get_global_size(0);
	__local v3r lr[ln];				// local r array
	__local int lqe[ln], lqn[ln];	// local qe & qn arrays
	v3r dr, r0 = r[id], f = (v3r)(0);
	int qe0 = qe[id], qn0 = qn[id];
	uint i, k = get_group_id(0)*ln;
	const uint k_end = (k+n-ln) % n;
	real m0 = m[id], d, d1_2, d1_3, fs;
	while (true)
	{
		lr[lid] = r[lid+k];
		lqe[lid] = qe[lid+k];
		lqn[lid] = qn[lid+k];
		barrier(CLK_LOCAL_MEM_FENCE);
		for (i=0; i<ln; i++)
		{
			dr = lr[i] - r0;
			d = fast_length(dr);
			if (d>0)
			{
				d1_2 = 1/(d*d);
				d1_3 = d1_2/d;
				fs = 0;
				if (d>1)
					fs -= qe0 * lqe[i] * d1_3;	// electric force
				if (d>0.5 && d<1.5)
					fs += 200 * qn0 * lqn[i] * (d1_3 - d1_2*d1_3);	// strong force
				f += fs * dr;
			}
		}
		if (k==k_end) break;
		k = (k+ln)%n;
	}
	// if particle is not massless, update global a array:
	if (m0>0) a[id] = (f + qe0*cross(v[id], B))/m0;
}

__kernel __attribute__((reqd_work_group_size(ln, 1, 1)))
void update_positions(__global v3r * r, __global v3r * v, __global const v3r * a)
{
	uint id = get_global_id(0);
	r[id] += dt * (v[id] + dt2 * a[id]);
	v[id] += dt * a[id];
	//v[id] *= 0.99999;	// artificial friction
}
